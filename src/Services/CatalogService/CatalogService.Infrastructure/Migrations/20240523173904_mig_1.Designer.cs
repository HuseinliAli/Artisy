// <auto-generated />
using System;
using CatalogService.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatalogService.Infrastructure.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20240523173904_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CatalogArtistNationalityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogArtistNationalityId");

                    b.ToTable("CatalogArtists");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogArtistNationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatalogArtistNationalities");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogColorPalette", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatalogColorPalettes");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatalogGenres");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogArtistId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogGenreId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogMediumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CatalogArtistId");

                    b.HasIndex("CatalogGenreId");

                    b.HasIndex("CatalogMediumId");

                    b.ToTable("CatalogItems");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogItemCatalogColorPalette", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogColorPaletteId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogColorPaletteId");

                    b.HasIndex("CatalogItemId");

                    b.ToTable("CatalogItemCatalogColorPalettes");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogMedium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatalogMediums");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogArtist", b =>
                {
                    b.HasOne("CatalogService.Domain.Models.Entities.CatalogArtistNationality", "CatalogArtistNationality")
                        .WithMany("CatalogArtists")
                        .HasForeignKey("CatalogArtistNationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogArtistNationality");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogItem", b =>
                {
                    b.HasOne("CatalogService.Domain.Models.Entities.CatalogArtist", "CatalogArtist")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogService.Domain.Models.Entities.CatalogGenre", "CatalogGenre")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogService.Domain.Models.Entities.CatalogMedium", "CatalogMedium")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogMediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogArtist");

                    b.Navigation("CatalogGenre");

                    b.Navigation("CatalogMedium");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogItemCatalogColorPalette", b =>
                {
                    b.HasOne("CatalogService.Domain.Models.Entities.CatalogColorPalette", "CatalogColorPalette")
                        .WithMany("CatalogItemCatalogColorPalettes")
                        .HasForeignKey("CatalogColorPaletteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogService.Domain.Models.Entities.CatalogItem", "CatalogItem")
                        .WithMany("CatalogItemCatalogColorPalettes")
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogColorPalette");

                    b.Navigation("CatalogItem");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogArtist", b =>
                {
                    b.Navigation("CatalogItems");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogArtistNationality", b =>
                {
                    b.Navigation("CatalogArtists");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogColorPalette", b =>
                {
                    b.Navigation("CatalogItemCatalogColorPalettes");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogGenre", b =>
                {
                    b.Navigation("CatalogItems");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogItem", b =>
                {
                    b.Navigation("CatalogItemCatalogColorPalettes");
                });

            modelBuilder.Entity("CatalogService.Domain.Models.Entities.CatalogMedium", b =>
                {
                    b.Navigation("CatalogItems");
                });
#pragma warning restore 612, 618
        }
    }
}
